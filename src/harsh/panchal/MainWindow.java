/* 
 * Copyright 2014 Harsh Panchal <panchal.harsh18@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package harsh.panchal;

import chrriis.dj.nativeswing.swtimpl.NativeInterface;
import chrriis.dj.nativeswing.swtimpl.components.DefaultWebBrowserDecorator;
import chrriis.dj.nativeswing.swtimpl.components.JWebBrowser;
import chrriis.dj.nativeswing.swtimpl.components.WebBrowserDecorator;
import static harsh.panchal.Common.*;
import java.awt.BorderLayout;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author Harsh Panchal
 */
public class MainWindow extends javax.swing.JFrame {
    
    // client & serve sockets
    private ServerSocket socket;
    private Socket client;
    
    // storing current state of server
    private static boolean serverRunning = false;
    
    // thread on which server runs
    private Thread server;
    
    // get control over server
    private boolean keepRunning = true;
    
    // list of all unprocessed requests
    private List<Request> requests = new ArrayList<Request>();
    
    // list of all unprocessed requests actually displayed
    private DefaultListModel model = new DefaultListModel();
    
    // switch for debugging messages
    public static boolean DEBUG = true;
    
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        server_status = new javax.swing.JLabel();
        but_start_server = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logbox = new javax.swing.JTextArea();
        but_kill_server = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        pending_requests = new javax.swing.JList();
        but_ack = new javax.swing.JButton();
        but_debug = new javax.swing.JButton();
        but_clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Save Me");

        but_start_server.setText("Start Server");
        but_start_server.setToolTipText("Start Listening");
        but_start_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_start_serverActionPerformed(evt);
            }
        });

        logbox.setEditable(false);
        logbox.setColumns(20);
        logbox.setRows(5);
        logbox.setToolTipText("Log Window");
        jScrollPane1.setViewportView(logbox);

        but_kill_server.setText("Kill Server");
        but_kill_server.setToolTipText("Stop listening to requests");
        but_kill_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_kill_serverActionPerformed(evt);
            }
        });

        pending_requests.setToolTipText("Pending Requests");
        pending_requests.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                pending_requestsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(pending_requests);

        but_ack.setText("Acknowledge");
        but_ack.setToolTipText("Send Acknowledge to client");
        but_ack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_ackActionPerformed(evt);
            }
        });

        but_debug.setText("DEBUG");
        but_debug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_debugActionPerformed(evt);
            }
        });

        but_clear.setText("Clear Log");
        but_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(server_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(but_start_server, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(but_debug)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(but_clear)
                                .addGap(44, 44, 44)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(but_kill_server, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(but_ack, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(server_status, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(but_ack, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(but_start_server)
                    .addComponent(but_kill_server)
                    .addComponent(but_debug)
                    .addComponent(but_clear))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void but_start_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_start_serverActionPerformed
        if(!serverRunning) {
            try {
                socket = new ServerSocket(6500);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                logbox.append("Serer couldn't be started\n");
                server_status.setText("Error starting server...!");
                return;
            }
            logbox.append("Server started on " + getIPAdd() + ":" + Common.SERVER_PORT + "\n");
            server_status.setText("Listening to " + getIPAdd() + ":" + Common.SERVER_PORT);
            keepRunning = true;
            server = new Thread(new Runnable() {
                @Override
                public void run() {
                    while(keepRunning) {
                        try {
                            client = socket.accept();
                            BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));
                            String foo = reader.readLine();
                            if(DEBUG)
                                logbox.append("Rcvd: " + foo + "\n");
                            if(foo != null) {
                                Request rs = new Request(foo);
                                // validate ip address because currently we only support IPv4
                                if(validateIP(rs.getOwner())) {
                                    int index = searchClient(rs);
                                    if(DEBUG) {
                                        logbox.append(rs.toString() + "\n");
                                    }
                                    // check whether Request already exist in queue
                                    if(index < 0 || requests.isEmpty()) {
                                        requests.add(rs);
                                        model.addElement(rs.getOwner());
                                        pending_requests.setModel(model);
                                    } else {
                                        /* 
                                         * update ordinates only if request is already
                                         * present in queue
                                         */
                                        Request obj = requests.get(index);
                                        obj.setOrds(rs.getOrds());
                                        obj.count++;
                                    }
                                } else {
                                    logbox.append("Rejected request due to malformed data. Currently only IPv4 is supported\n");
                                }
                            }
                            reader.close();
                            client.close();
                        } catch (IOException ex) {
                            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }, "serverThread");
            server.start();
            serverRunning = true;
        } else logbox.append("Server already running, please stop it & then try to start it again...\n");
    }//GEN-LAST:event_but_start_serverActionPerformed

    private void but_kill_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_kill_serverActionPerformed
        if(server != null) {
            try {
                keepRunning = false;
                socket.close();
                // wait for server thread to finish
                server.join();
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                server_status.setText("Error while stopping server...!");
                logbox.append("Server couldn't be stopped " + ex + "\n");
            }
            //server.stop() is obselete now
            server_status.setText("Server stopped...!");
            logbox.append("Server stopped...!\n");
            serverRunning = false;
        }
    }//GEN-LAST:event_but_kill_serverActionPerformed

    private void but_ackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_ackActionPerformed
        int seleceted = pending_requests.getSelectedIndex();
        if(seleceted < 0)
            return;
        Request selectedReq = requests.get(seleceted);
        // show user's location when acknowledged
        showWebPage(generateQuery(selectedReq.getOrds()));
        // now send acknowledge message to client
        sendAckMsg(selectedReq.getOwner(), "ACKNOWLEDGED");
        // remove request
        requests.remove(seleceted);
        model.removeElementAt(seleceted);
        pending_requests.setModel(model);
    }//GEN-LAST:event_but_ackActionPerformed

    private void pending_requestsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_pending_requestsValueChanged
        // go further only when choice selection is completed
        if(!evt.getValueIsAdjusting()) {
            if(pending_requests.getSelectedIndex() >= 0) {
                if(DEBUG)
                    logbox.append(requests.get(pending_requests.getSelectedIndex()).toString());
            }
        }
    }//GEN-LAST:event_pending_requestsValueChanged

    private void but_debugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_debugActionPerformed
        for(Request x : requests)
            logbox.append(x.toString() + "\n");
    }//GEN-LAST:event_but_debugActionPerformed

    private void but_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_clearActionPerformed
        // empty the logbox
        logbox.setText("");
    }//GEN-LAST:event_but_clearActionPerformed

    /**
     * shows the webpage from url in separate browser window
     * 
     * @param url   URL of webpage to be shown
     */
    private void showWebPage(String url) {
        JFrame frame = new JFrame("Save ME - Navigator");
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        JPanel webBrowserPanel = new JPanel(new BorderLayout());
        webBrowserPanel.setBorder(BorderFactory.createTitledBorder("Location:"));
        NativeInterface.open();
        JWebBrowser browser = new JWebBrowser() {
            @Override
            protected WebBrowserDecorator createWebBrowserDecorator(Component renderingComponent) {
              return createCustomWebBrowserDecorator(this, renderingComponent);
            }
        };
        browser.navigate(url);
        webBrowserPanel.add(browser, BorderLayout.CENTER);
        frame.add(webBrowserPanel);
        frame.setVisible(true);
    }
    
    /* 
     *  we want to hide menubar & toolbar button in browser window, so override
     *  respective methods so that they're not added by constructor
     */
    private static WebBrowserDecorator createCustomWebBrowserDecorator(JWebBrowser webBrowser, Component renderingComponent) {
        
        return new DefaultWebBrowserDecorator(webBrowser, renderingComponent) {
            @Override
            protected void addMenuBarComponents(WebBrowserMenuBar menuBar) {
                // do nothing
            }
            @Override
            protected void addButtonBarComponents(WebBrowserButtonBar buttonBar) {
                // do nothing
            }
        };
    }
    
    /**
     * searches client from list of requests
     * 
     * @param rs    object to be searched
     * @return      index of object from requests list, -1 if not found
     */
    private int searchClient(Request rs) {
        int i = 0;
        for(Request tmp : requests) {
            if(tmp.getOwner().equals(rs.getOwner()))
                return i;
            else
                i++;
        }
        if(DEBUG)
            logbox.append("searchClient() return " + i + "\n");
        return -1;
    }
    
    /**
     * Sends message to client
     * 
     * @param clientIP  IP address of client
     * @param msg       message to be sent
     */
    private void sendAckMsg(String clientIP, String msg) {
	new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Socket server = new Socket(clientIP, ACK_PORT);
                    PrintWriter writer = new PrintWriter(server.getOutputStream(), true);
                    writer.write(msg);
                    writer.flush();
                    writer.close();
                    server.close();
                } catch (Exception ex) {
                    logbox.append("Error: " + ex.toString() + "\nError sending Acknowledgement...!\n");
                }
            }
	}).start();
    }
    
    /**
     * Generates query for Google Maps for specified co-ordinates
     * 
     * @param ord   ordinates
     * @return      generated query
     */
    private String generateQuery(Ordinate ord) {
        return ("http://maps.google.com/maps?q=" + ord.getLatitude() + "," + ord.getLongitude());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    
    /**
     * Returns IP address of Host
     * 
     * @return  string describing IP address
     */
    private String getIPAdd() {
        String ret = null;
        try {
            ret = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ret;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_ack;
    private javax.swing.JButton but_clear;
    private javax.swing.JButton but_debug;
    private javax.swing.JButton but_kill_server;
    private javax.swing.JButton but_start_server;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea logbox;
    private javax.swing.JList pending_requests;
    private javax.swing.JLabel server_status;
    // End of variables declaration//GEN-END:variables
}
